@model ComputerShop.Models.User

<!DOCTYPE html>
<html>
<head>
	@Styles.Render("~/Content/InputForm.css")
    <meta name="viewport" content="width=device-width" />
    <title>Edit</title>
</head>
<body>
    @Scripts.Render("~/bundles/jquery")
    @Scripts.Render("~/bundles/jqueryval")
    
    
    	<div class="jumbotron text-center">
    	@using (Html.BeginForm())
    	{
    		@Html.AntiForgeryToken()
        
    		<div class="form-horizontal">
    			<h2>User</h2>
    
    			@Html.ValidationSummary(true, "", new { @class = "text-danger" })
    			@Html.HiddenFor(model => model.Id)
    
    			<div class="form-group">
    				@if (Model.Address == null)
                    {
                                
                        <text>[</text>@Html.ActionLink("Add Address", "Create", "Address")<text>]</text>
}
                    else
                    {
                        <text>[</text>@Html.ActionLink("Edit Address", "Edit", "Address", routeValues: new { id = Model.Address.UserId }, htmlAttributes: null)<text>]</text>
                    }
    			</div>
    	
    
    			<div class="form-group">
    				@Html.LabelFor(model => model.Email)
                
    				@Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
    				@Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
    			</div>
    	
    
    			<div class="form-group">
    				@Html.LabelFor(model => model.EmailConfirmed)
                
    				<div class="checkbox">
        					@Html.EditorFor(model => model.EmailConfirmed)
        				@Html.ValidationMessageFor(model => model.EmailConfirmed, "", new { @class = "text-danger" })
    				</div>
    			</div>
    	
    
    			<div class="form-group">
    				@Html.LabelFor(model => model.PasswordHash)
                
    				@Html.EditorFor(model => model.PasswordHash, new { htmlAttributes = new { @class = "form-control" } })
    				@Html.ValidationMessageFor(model => model.PasswordHash, "", new { @class = "text-danger" })
    			</div>
    	
    
    			<div class="form-group">
    				@Html.LabelFor(model => model.SecurityStamp)
                
    				@Html.EditorFor(model => model.SecurityStamp, new { htmlAttributes = new { @class = "form-control" } })
    				@Html.ValidationMessageFor(model => model.SecurityStamp, "", new { @class = "text-danger" })
    			</div>
    	
    
    			<div class="form-group">
    				@Html.LabelFor(model => model.PhoneNumber)
                
    				@Html.EditorFor(model => model.PhoneNumber, new { htmlAttributes = new { @class = "form-control" } })
    				@Html.ValidationMessageFor(model => model.PhoneNumber, "", new { @class = "text-danger" })
    			</div>
    	
    
    			<div class="form-group">
    				@Html.LabelFor(model => model.PhoneNumberConfirmed)
                
    				<div class="checkbox">
        					@Html.EditorFor(model => model.PhoneNumberConfirmed)
        				@Html.ValidationMessageFor(model => model.PhoneNumberConfirmed, "", new { @class = "text-danger" })
    				</div>
    			</div>
    	
    
    			<div class="form-group">
    				@Html.LabelFor(model => model.TwoFactorEnabled)
                
    				<div class="checkbox">
        					@Html.EditorFor(model => model.TwoFactorEnabled)
        				@Html.ValidationMessageFor(model => model.TwoFactorEnabled, "", new { @class = "text-danger" })
    				</div>
    			</div>
    	
    
    			<div class="form-group">
    				@Html.LabelFor(model => model.LockoutEndDateUtc)
                
    				@Html.EditorFor(model => model.LockoutEndDateUtc, new { htmlAttributes = new { @class = "form-control" } })
    				@Html.ValidationMessageFor(model => model.LockoutEndDateUtc, "", new { @class = "text-danger" })
    			</div>
    	
    
    			<div class="form-group">
    				@Html.LabelFor(model => model.LockoutEnabled)
                
    				<div class="checkbox">
        					@Html.EditorFor(model => model.LockoutEnabled)
        				@Html.ValidationMessageFor(model => model.LockoutEnabled, "", new { @class = "text-danger" })
    				</div>
    			</div>
    	
    
    			<div class="form-group">
    				@Html.LabelFor(model => model.AccessFailedCount)
                
    				@Html.EditorFor(model => model.AccessFailedCount, new { htmlAttributes = new { @class = "form-control" } })
    				@Html.ValidationMessageFor(model => model.AccessFailedCount, "", new { @class = "text-danger" })
    			</div>
    	
    
    			<div class="form-group">
    				@Html.LabelFor(model => model.UserName)
                
    				@Html.EditorFor(model => model.UserName, new { htmlAttributes = new { @class = "form-control" } })
    				@Html.ValidationMessageFor(model => model.UserName, "", new { @class = "text-danger" })
    			</div>
    	
    
    			<div class="form-group">
    				<input type="submit" value="Save" class="btn btn-default" />
    			</div>    
    			
    
    			
    		</div>
    	}
    		<div>
    			@Html.ActionLink("Back to List", "Index")
    		</div>
    	</div>
</body>
</html>
